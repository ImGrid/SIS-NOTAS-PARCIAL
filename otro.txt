const jwt = require('jsonwebtoken');
require('dotenv').config(); // variable del .env

const claveSecreta = process.env.JWT_SECRET;

// token JWT
function generarToken(usuario) {
  const payload = {
    id: usuario.id,
    correo: usuario.correo, 
  };

  const opciones = {
    expiresIn: '1h',
  };

  return jwt.sign(payload, claveSecreta, opciones);
}


function verificarToken(req, res, next) {

  const token = req.headers.authorization?.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: 'Token no proporcionado' });
  }

  try {

    const decodificado = jwt.verify(token, claveSecreta);

    req.usuario = decodificado;

    next(); 
  } catch (error) {
    return res.status(401).json({ error: 'Token no válido' });
  }
}

module.exports = {
  generarToken,
  verificarToken,
};


const express = require('express');
const router = express.Router();
const docenteController = require('../controllers/docente_controller');
const auth = require('../secutiry/auth');
const validarDocente = (req, res, next) => {
  const { nombre_completo, correo_electronico, cargo } = req.body;
  if (!nombre_completo || !correo_electronico || !cargo) {
    return res.status(400).json({ error: 'Todos los campos son obligatorios' });
  }
  next();
};


// Crear un nuevo docente
router.post('/create',auth.verificarToken, validarDocente, docenteController.crearDocente);

// Obtener todos los docentes
router.get('/get', auth.verificarToken,  docenteController.obtenerDocentes);

// Obtener un docente por su ID
router.get('/get/:id', auth.verificarToken, docenteController.obtenerDocentePorId);

// Actualizar un docente por su ID
router.put('/update/:id', auth.verificarToken, validarDocente, docenteController.actualizarDocente);

// Eliminar un docente por su ID
router.delete('/delete/:id', auth.verificarToken, docenteController.eliminarDocente);
// Enviar código al correo del docente
//router.post('/solicitar-codigo', docenteController.solicitarCodigo);

router.post('/login', docenteController.loginDocente);
module.exports = router;



// server/controllers/docente_controller.js
const { enviarCodigoVerificacion } = require('../utils/email');
const auth = require('../secutiry/auth');
const docenteModel = require('../models/Docente_model');
const express = require('express');
const pool = require('../database/db');
const router = express.Router();
async function crearDocente(req, res) {
  try {
    const docente = await docenteModel.crearDocente(req.body);
    res.status(201).json(docente);
  } catch (error) {
    if (error.code === '23505') { 
      return res.status(400).json({ error: 'El correo electrónico ya está en uso' });
    }
    res.status(500).json({ error: error.message });
  }
}
/* genera el token aleatorio de 6 digitos
function generarCodigo() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}
// funcion para enviar el token al correo del docente
async function solicitarCodigo(req, res) {
  try {
    const { correo_electronico } = req.body;
    const docente = await docenteModel.obtenerDocentePorCorreo(correo_electronico);

    if (!docente) {
      return res.status(404).json({ error: 'Docente no encontrado' });
    }

    const codigo = generarCodigo();
    await enviarCodigoVerificacion(correo_electronico, codigo);
    await pool.query(
      'INSERT INTO codigos_verificacion (correo_electronico, codigo, expiracion) VALUES ($1, $2, NOW() + INTERVAL \'5 minutes\') ON CONFLICT (correo_electronico) DO UPDATE SET codigo = EXCLUDED.codigo, expiracion = EXCLUDED.expiracion',
      [correo_electronico, codigo]
    );

    res.status(200).json({ mensaje: 'Código enviado al correo' });
  } catch (error) {
    console.error('Error en solicitarCodigo:', error);
    res.status(500).json({ error: 'Error al enviar el código' });
  }
}*/

async function loginDocente(req, res) {
  try {
    const { correo_electronico, contrasena } = req.body;
    const docente = await docenteModel.obtenerDocentePorCorreo(correo_electronico);

    if (!docente) {
      return res.status(401).json({ error: 'Credenciales inválidas' });
    }

    if (contrasena === docente.contrasena) {
      const token = auth.generarToken(docente);
      res.json({ token });
    } else {
      res.status(401).json({ error: 'Credenciales inválidas' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}
async function obtenerDocentes(req, res) {
  try {
    const docentes = await docenteModel.obtenerDocentes();
    res.json(docentes);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

async function obtenerDocentePorId(req, res) {
  try {
    const docente = await docenteModel.obtenerDocentePorId(req.params.id);
    if (!docente) {
      return res.status(404).json({ error: 'Docente no encontrado' });
    }
    res.json(docente);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

async function actualizarDocente(req, res) {
  try {
    const docente = await docenteModel.actualizarDocente(req.params.id, req.body);
    if (!docente) {
      return res.status(404).json({ error: 'Docente no encontrado' });
    }
    res.json(docente);
  } catch (error) {
    if (error.code === '23505') { // Código de error de PostgreSQL para violación de restricción UNIQUE
      return res.status(400).json({ error: 'El correo electrónico ya está en uso' });
    }
    res.status(500).json({ error: error.message });
  }
}

async function eliminarDocente(req, res) {
  try {
    const docente = await docenteModel.eliminarDocente(req.params.id);
    if (!docente) {
      return res.status(404).json({ error: 'Docente no encontrado' });
    }
    res.json({ message: 'Docente eliminado', docente });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

module.exports = {
  crearDocente,
  obtenerDocentes,
  obtenerDocentePorId,
  actualizarDocente,
  eliminarDocente,
  loginDocente,
  //solicitarCodigo,
};

